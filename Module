#include "NW_I0_GENERIC"
#include "our_constants"

// Called every time that the AI needs to take a combat decision. The default is
// a call to the NWN DetermineCombatRound.
void T2_DetermineCombatRound( object oIntruder = OBJECT_INVALID, int nAI_Difficulty = 10 )
{
// You can leave this function as is (50.000 lines, quite intelligent) , or say "if this happens, then this, otherwise use the function below
    DetermineCombatRound( oIntruder, nAI_Difficulty );
}

// Called every heartbeat (i.e., every six seconds).
void T2_HeartBeat()
{
// this function was added
    string sTag = "I am " + GetTag( OBJECT_SELF );
    SpeakString( sTag, TALKVOLUME_SHOUT);
// end of added function

    if (GetIsInCombat())        // "am I fighting?"
        return;

    string sTarget = GetLocalString( OBJECT_SELF, "TARGET" );
    if (sTarget == "")
        return;

    object oTarget = GetObjectByTag( sTarget );
    if (!GetIsObjectValid( oTarget ))               // If object is not valid, return
        return;

    // If there is a member of my own team close to the target and closer than me,
    // and no enemy is closer and this other member is not in combat and
    // has the same target, then choose a new target.
    float fToTarget = GetDistanceToObject( oTarget );
    int i = 1;
    int bNewTarget = FALSE;
    object oCreature = GetNearestObjectToLocation( OBJECT_TYPE_CREATURE, GetLocation( oTarget ), i );
    while (GetIsObjectValid( oCreature ))
    {
        if (GetLocation( oCreature ) == GetLocation( OBJECT_SELF ))
            break;
        if (GetDistanceBetween( oCreature, oTarget ) > fToTarget)
            break;
        if (GetDistanceBetween( oCreature, oTarget ) > 5.0)
            break;
        if (!SameTeam( oCreature ))
            break;
        if (GetIsInCombat( oCreature ))
            break;
        if (GetLocalString( oCreature, "TARGET" ) == sTarget)
        {
            bNewTarget = TRUE;
            break;
        }
        ++i;
        oCreature = GetNearestObjectToLocation( OBJECT_TYPE_CREATURE, GetLocation( oTarget ), i );
    }

    if (bNewTarget && !IsMaster())       // added !IsMaster, to make Master hunt the wizard
    {
        sTarget = GetRandomTarget();
        SetLocalString( OBJECT_SELF, "TARGET", sTarget );
        oTarget = GetObjectByTag( sTarget );
        if (!GetIsObjectValid( oTarget ))
            return;
        fToTarget = GetDistanceToObject( oTarget );
    }

    if (fToTarget > 0.5)
    {
        SpeakString( "I move to " + sTarget, TALKVOLUME_SHOUT );
        ActionMoveToLocation( GetLocation( oTarget ), TRUE );
    }

    return;
}

// Called when the NPC is spawned.
// ACTIONS GET THROWN OUT, because units are paralyzed at spawn
void T2_Spawn()
{
    string sTarget = GetRandomTarget();
    if (IsMaster())
    {
        sTarget = "NPC_" + OpponentColor()+ "_1";             // could be that the wizard is also dead at this point
        SpeakString("I will get that wizard! ->" + sTarget, TALKVOLUME_SHOUT);
        SetLocalString( OBJECT_SELF, "TARGET", sTarget );
        return;
    }
    // if I am wizard, if I am ...
    SetLocalString( OBJECT_SELF, "TARGET", sTarget );    // the string (target) is stored IN the object
    ActionMoveToLocation( GetLocation( GetObjectByTag( sTarget ) ), TRUE );  // TRUE to say that the character should run
}

// This function is called when certain events take place, after the standard
// NWN handling of these events has been performed.
void T2_UserDefined( int Event )
{
    switch (Event)
    {
        // The NPC has just been attacked.
        case EVENT_ATTACKED:
            break;

        // The NPC was damaged.
        case EVENT_DAMAGED:
            break;

        // At the end of one round of combat.
        case EVENT_END_COMBAT_ROUND:
            break;

        // Every heartbeat (i.e., every six seconds).
        case EVENT_HEARTBEAT:
            T2_HeartBeat();
            break;

        // Whenever the NPC perceives a new creature.
        case EVENT_PERCEIVE:
            break;

        // When a spell is cast at the NPC.
        case EVENT_SPELL_CAST_AT:
            break;

        // Whenever the NPC's inventory is disturbed.
        case EVENT_DISTURBED:
            break;

        // Whenever the NPC dies.
        case EVENT_DEATH:
            break;

        // When the NPC has just been spawned.
        case EVENT_SPAWN:
            T2_Spawn();
            break;
    }

    return;
}

// Called when the fight starts, just before the initial spawning.
void T2_Initialize( string sColor )
{
    SetTeamName( sColor, "T2-" + GetStringLowerCase( sColor ) );
}
