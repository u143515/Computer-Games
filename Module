#include "NW_I0_GENERIC"
#include "our_constants"

// Heal if damaged
void T2_HealC()
{
    if (GetHealth() < 4 && !GetIsInCombat())
    {
        TalentHealingSelf(); // attempt to heal self with potions or spells
        SpeakString("I will heal, G", TALKVOLUME_SHOUT);
    }
}


// Select closest free altar, nearest enemy otherwise
void T2_ClosestFreeAltarC()
{

float MinDist = 0.0;
string ClaimTarget = "";         // HAAKJES CHECKEN

if ((ClaimerOf(WpFurthestAltarLeft())==""))
    {
    MinDist = GetDistanceToObject(GetObjectByTag(WpFurthestAltarLeft()));
    ClaimTarget = WpFurthestAltarLeft();
    }                                    // HAAKJES CHECKEN

if ((ClaimerOf(WpFurthestAltarRight())=="")&& (GetDistanceToObject(GetObjectByTag(WpFurthestAltarRight()) <= MinDist)))
    {
    MinDist = GetDistanceToObject(GetObjectByTag(WpFurthestAltarRight()));
    ClaimTarget = WpFurthestAltarRight();
    }                                               // HAAKJES CHECKEN

if ((ClaimerOf(WpClosestAltarLeft())=="") && (GetDistanceToObject(GetObjectByTag(WpClosestAltarLeft())) <= MinDist))
    {
    MinDist = GetDistanceToObject(GetObjectByTag(WpClosestAltarLeft()));
    ClaimTarget = WpClosestAltarLeft();
    }                                               // HAAKJES CHECKEN

if ((ClaimerOf(WpClosestAltarRight())=="") && (GetDistanceToObject(GetObjectByTag(WpClosestAltarRight()) <= MinDist)))
    {
    MinDist = GetDistanceToObject(GetObjectByTag(WpClosestAltarRight());
    ClaimTarget = WpClosestAltarRight();
    }                                          // HAAKJES CHECKEN

if ((ClaimerOf(WpDoubler())=="") && (GetDistanceToObject(GetObjectByTag(WpDoubler() <= MinDist))
    {
    MinDist = GetDistanceToObject(GetObjectByTag(WpClosestAltarRight());
    ClaimTarget = WpClosestAltarRight();
    }                                            // HAAKJES CHECKEN

if (ClaimTarget != "")
    return ClaimTarget;    // string
else
    return "";
}


// Called every time that the AI needs to take a combat decision. The default is
// a call to the NWN DetermineCombatRound.
void T2_DetermineCombatRound( object oIntruder = OBJECT_INVALID, int nAI_Difficulty = 10 )
{
    DetermineCombatRound( oIntruder, nAI_Difficulty );
}

// Called every heartbeat (i.e., every six seconds).
void T2_HeartBeat()
{
    if (GetIsInCombat())
        return;

    string sTarget = GetLocalString( OBJECT_SELF, "TARGET" );
    if (sTarget == "")
        return;

    object oTarget = GetObjectByTag( sTarget );
    // doet niks
    if (!GetIsObjectValid( oTarget ))
        return;

    // If there is a member of my own team close to the target and closer than me,
    // and no enemy is closer and this other member is not in combat and
    // has the same target, then choose a new target.
    float fToTarget = GetDistanceToObject( oTarget );
    int i = 1;
    int bNewTarget = FALSE;
    object oCreature = GetNearestObjectToLocation( OBJECT_TYPE_CREATURE, GetLocation( oTarget ), i );
    while (GetIsObjectValid( oCreature ))
    {
        if (GetLocation( oCreature ) == GetLocation( OBJECT_SELF ))
            break;
        if (GetDistanceBetween( oCreature, oTarget ) > fToTarget)
            break;
        if (GetDistanceBetween( oCreature, oTarget ) > 5.0)
            break;
        if (!SameTeam( oCreature ))
            break;
        if (GetIsInCombat( oCreature ))         // Code does not continue if in combat
            break;
        if (GetLocalString( oCreature, "TARGET" ) == sTarget)
        {
            bNewTarget = TRUE;
            break;
        }
        ++i;
        oCreature = GetNearestObjectToLocation( OBJECT_TYPE_CREATURE, GetLocation( oTarget ), i );
    }

    if (bNewTarget )
    {
        if (!T2_ClosestFreeAltarC()=="")
            {
            sTarget = T2_ClosestFreeAltarC();
            SetLocalString( OBJECT_SELF, "TARGET", sTarget );
            oTarget = GetObjectByTag(sTarget);
            }
        else
            oTarget = GetNearestEnemy();
        if (!GetIsObjectValid( oTarget ))
            return;
        fToTarget = GetDistanceToObject( oTarget );
    }

    if (fToTarget > 0.5)
        ActionMoveToLocation( GetLocation( oTarget ), TRUE );

    SpeakString("I will move  to" + sTarget, TALKVOLUME_SHOUT);

    return;
}

// Called when the NPC is spawned.
void T2_Spawn()
{
    if (IsWizardLeft())
    {
        string sTarget = WpClosestAltarLeft();
        SetLocalString( OBJECT_SELF, "TARGET", sTarget );      // SET
        return;
    }
    else if (IsWizardRight())
    {
        string sTarget = WpClosestAltarRight();
        SetLocalString( OBJECT_SELF, "TARGET", sTarget );       // SET
        return;
    }
    else if (IsFighterRight())
    {
        string sTarget = WpFurthestAltarRight();
        SetLocalString( OBJECT_SELF, "TARGET", sTarget );       // SET
        return;
    }
    else if (IsClericRight())
    {
        string sTarget = WpFurthestAltarRight();
        SetLocalString( OBJECT_SELF, "TARGET", sTarget);
        return ;
    }
    else if (IsFighterLeft())
    {
        string sTarget = WpFurthestAltarLeft();
        SetLocalString( OBJECT_SELF, "TARGET", sTarget );       // SET
        return;
     }
    else if (IsClericLeft())
    {
        string sTarget = WpFurthestAltarLeft();
        SetLocalString( OBJECT_SELF, "TARGET", sTarget );       // SET
        return;
    }

   else if (IsMaster())
   {
        string sTarget = "NPC_" + OpponentColor()+ "_4";             // could be that the wizard is also dead at this point
        SpeakString("I will get that master! ->" + sTarget, TALKVOLUME_SHOUT);
        SetLocalString( OBJECT_SELF, "TARGET", sTarget );
        return;
   }
}

// This function is called when certain events take place, after the standard
// NWN handling of these events has been performed.
void T2_UserDefined( int Event )
{
    switch (Event)
    {
        // The NPC has just been attacked.
        case EVENT_ATTACKED:
            break;

        // The NPC was damaged.
        case EVENT_DAMAGED:
            break;

        // At the end of one round of combat.
        case EVENT_END_COMBAT_ROUND:
            break;

        // Every heartbeat (i.e., every six seconds).
        case EVENT_HEARTBEAT:
            T2_HeartBeat();
            T2_HealC();
            break;

        // Whenever the NPC perceives a new creature.
        case EVENT_PERCEIVE:
            break;

        // When a spell is cast at the NPC.
        case EVENT_SPELL_CAST_AT:
            break;

        // Whenever the NPC's inventory is disturbed.
        case EVENT_DISTURBED:
            break;

        // Whenever the NPC dies.
        case EVENT_DEATH:
            break;

        // When the NPC has just been spawned.
        case EVENT_SPAWN:
            T2_Spawn();
            break;
    }

    return;
}

// Called when the fight starts, just before the initial spawning.
void T2_Initialize( string sColor )
{
    SetTeamName( sColor, "T2-" + GetStringLowerCase( sColor ) );
}
